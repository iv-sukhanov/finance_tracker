// Code generated by MockGen. DO NOT EDIT.
// Source: message_sender.go

// Package bot is a generated GoMock package.
package bot

import (
	context "context"
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockSender) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockSenderMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSender)(nil).Run), ctx)
}

// Send mocks base method.
func (m *MockSender) Send(msg tgbotapi.MessageConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", msg)
}

// Send indicates an expected call of Send.
func (mr *MockSenderMockRecorder) Send(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSender)(nil).Send), msg)
}

// SendCallback mocks base method.
func (m *MockSender) SendCallback(cb tgbotapi.CallbackConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCallback", cb)
}

// SendCallback indicates an expected call of SendCallback.
func (mr *MockSenderMockRecorder) SendCallback(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCallback", reflect.TypeOf((*MockSender)(nil).SendCallback), cb)
}

// SendDoc mocks base method.
func (m *MockSender) SendDoc(doc tgbotapi.DocumentConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendDoc", doc)
}

// SendDoc indicates an expected call of SendDoc.
func (mr *MockSenderMockRecorder) SendDoc(doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDoc", reflect.TypeOf((*MockSender)(nil).SendDoc), doc)
}
